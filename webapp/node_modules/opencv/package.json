{
  "_args": [
    [
      {
        "raw": "peterbraden/node-opencv",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "peterbraden/node-opencv",
        "spec": "github:peterbraden/node-opencv",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:peterbraden/node-opencv.git",
          "sshUrl": "git+ssh://git@github.com/peterbraden/node-opencv.git",
          "httpsUrl": "git+https://github.com/peterbraden/node-opencv.git",
          "gitUrl": "git://github.com/peterbraden/node-opencv.git",
          "shortcut": "github:peterbraden/node-opencv",
          "directUrl": "https://raw.githubusercontent.com/peterbraden/node-opencv/master/package.json"
        }
      },
      "C:\\Users\\Pierce\\Desktop\\Comp Sci Project\\webapp"
    ]
  ],
  "_from": "peterbraden/node-opencv",
  "_id": "opencv@6.0.0",
  "_inCache": true,
  "_location": "/opencv",
  "_phantomChildren": {
    "asynckit": "0.4.0",
    "aws4": "1.7.0",
    "block-stream": "0.0.9",
    "caseless": "0.12.0",
    "co": "4.6.0",
    "combined-stream": "1.0.6",
    "detect-libc": "1.0.3",
    "extend": "3.0.1",
    "forever-agent": "0.6.1",
    "fstream": "1.0.11",
    "inherits": "2.0.3",
    "is-typedarray": "1.0.0",
    "isstream": "0.1.2",
    "json-stable-stringify": "1.0.1",
    "json-stringify-safe": "5.0.1",
    "jsprim": "1.4.1",
    "mime-types": "2.1.18",
    "mkdirp": "0.5.1",
    "nopt": "4.0.1",
    "npmlog": "4.1.2",
    "oauth-sign": "0.8.2",
    "rc": "1.2.6",
    "rimraf": "2.6.2",
    "safe-buffer": "5.1.1",
    "semver": "5.5.0",
    "sshpk": "1.14.1",
    "stringstream": "0.0.5",
    "tar-pack": "3.4.1",
    "tough-cookie": "2.3.4",
    "tunnel-agent": "0.6.0",
    "uuid": "3.2.1"
  },
  "_requested": {
    "raw": "peterbraden/node-opencv",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "peterbraden/node-opencv",
    "spec": "github:peterbraden/node-opencv",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:peterbraden/node-opencv.git",
      "sshUrl": "git+ssh://git@github.com/peterbraden/node-opencv.git",
      "httpsUrl": "git+https://github.com/peterbraden/node-opencv.git",
      "gitUrl": "git://github.com/peterbraden/node-opencv.git",
      "shortcut": "github:peterbraden/node-opencv",
      "directUrl": "https://raw.githubusercontent.com/peterbraden/node-opencv/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git://github.com/peterbraden/node-opencv.git#cfc96ba0af8c13d017d9c72f2c61ec968f1c15fb",
  "_shasum": "79e63eb3f0b80381134b26ebb97dda87962eea5f",
  "_shrinkwrap": null,
  "_spec": "peterbraden/node-opencv",
  "_where": "C:\\Users\\Pierce\\Desktop\\Comp Sci Project\\webapp",
  "author": {
    "name": "Peter Braden",
    "email": "peterbraden@peterbraden.co.uk"
  },
  "binary": {
    "module_name": "opencv",
    "module_path": "./build/{module_name}/v{version}/{configuration}/{node_abi}-{platform}-{arch}/",
    "remote_path": "./{module_name}/v{version}/{configuration}/",
    "package_name": "{node_abi}-{platform}-{arch}.tar.gz",
    "host": "https://node-opencv.s3.amazonaws.com"
  },
  "bugs": {
    "url": "https://github.com/peterbraden/node-opencv/issues"
  },
  "bundleDependencies": [
    "node-pre-gyp"
  ],
  "dependencies": {
    "buffers": "^0.1.1",
    "istanbul": "0.4.5",
    "nan": "^2.0.9",
    "node-pre-gyp": "^0.6.33"
  },
  "description": "Node Bindings to OpenCV",
  "devDependencies": {
    "aws-sdk": "~2.1.20",
    "glob": "^5.0.3",
    "request": "^2.44.0",
    "tape": "^3.0.0"
  },
  "engines": {
    "node": ">=0.12"
  },
  "gitHead": "cfc96ba0af8c13d017d9c72f2c61ec968f1c15fb",
  "homepage": "https://github.com/peterbraden/node-opencv#readme",
  "keywords": [
    "opencv",
    "computer",
    "vision",
    "quadrocopter"
  ],
  "license": "MIT",
  "main": "./lib/opencv",
  "name": "opencv",
  "optionalDependencies": {},
  "readme": "# node-opencv\r\n\r\n[![Build Status](https://secure.travis-ci.org/peterbraden/node-opencv.svg)](http://travis-ci.org/peterbraden/node-opencv)\r\n[![Coverage](http://codecov.io/github/peterbraden/node-opencv/coverage.svg?branch=master)](https://codecov.io/gh/peterbraden/node-opencv)\r\n\r\n[OpenCV](http://opencv.org) bindings for Node.js. OpenCV is\r\nthe defacto computer vision library - by interfacing with it natively in node,\r\nwe get powerful real time vision in js.\r\n\r\nPeople are using node-opencv to fly control quadrocoptors, detect faces from\r\nwebcam images and annotate video streams. If you're using it for something\r\ncool, I'd love to hear about it!\r\n\r\n## Install\r\n\r\nYou'll need OpenCV 2.3.1 or newer installed before installing node-opencv.  Note\r\nthat OpenCV 3.x is not yet fully supported.\r\n\r\n## Specific for macOS\r\nInstall OpenCV using brew\r\n```bash\r\nbrew tap homebrew/science\r\nbrew install opencv@2\r\nbrew link --force opencv@2\r\n```\r\n\r\n\r\n## Specific for Windows\r\n1. Download and install OpenCV (Be sure to use a 2.4 version) @\r\nhttp://opencv.org/releases.html\r\nFor these instructions we will assume OpenCV is put at C:\\OpenCV, but you can\r\nadjust accordingly.\r\n\r\n2. If you haven't already, create a system variable called OPENCV_DIR and set it\r\n   to C:\\OpenCV\\build\\x64\\vc12\r\n\r\n   Make sure the \"x64\" part matches the version of NodeJS you are using.\r\n\r\n   Also add the following to your system PATH\r\n        ;%OPENCV_DIR%\\bin\r\n\r\n3. Install Visual Studio 2013. Make sure to get the C++ components.\r\n   You can use a different edition, just make sure OpenCV supports it, and you\r\n   set the \"vcxx\" part of the variables above to match.\r\n\r\n4. Download peterbraden/node-opencv fork\r\ngit clone https://github.com/peterbraden/node-opencv\r\n\r\n5. run npm install\r\n\r\n```bash\r\n$ npm install opencv\r\n```\r\n\r\n## Examples\r\nRun the examples from the parent directory.\r\n\r\n### Face Detection\r\n\r\n```javascript\r\ncv.readImage(\"./examples/files/mona.png\", function(err, im){\r\n  im.detectObject(cv.FACE_CASCADE, {}, function(err, faces){\r\n    for (var i=0;i<faces.length; i++){\r\n      var x = faces[i]\r\n      im.ellipse(x.x + x.width/2, x.y + x.height/2, x.width/2, x.height/2);\r\n    }\r\n    im.save('./out.jpg');\r\n  });\r\n})\r\n```\r\n\r\n\r\n## API Documentation\r\n\r\n### Matrix\r\n\r\nThe [matrix](http://opencv.jp/opencv-2svn_org/cpp/core_basic_structures.html#mat) is the most useful\r\nbase data structure in OpenCV. Things like images are just matrices of pixels.\r\n\r\n#### Creation\r\n\r\n```javascript\r\nnew Matrix(rows, cols)\r\n```\r\n\r\nOr if you're thinking of a Matrix as an image:\r\n\r\n```javascript\r\nnew Matrix(height, width)\r\n```\r\n\r\nOr you can use opencv to read in image files. Supported formats are in the OpenCV docs, but jpgs etc are supported.\r\n\r\n```javascript\r\ncv.readImage(filename, function(err, mat){\r\n  ...\r\n})\r\n\r\ncv.readImage(buffer, function(err, mat){\r\n  ...\r\n})\r\n```\r\n\r\nIf you need to pipe data into an image, you can use an ImageDataStream:\r\n\r\n```javascript\r\nvar s = new cv.ImageDataStream()\r\n\r\ns.on('load', function(matrix){\r\n  ...\r\n})\r\n\r\nfs.createReadStream('./examples/files/mona.png').pipe(s);\r\n```\r\n\r\nIf however, you have a series of images, and you wish to stream them into a\r\nstream of Matrices, you can use an ImageStream. Thus:\r\n\r\n```javascript\r\nvar s = new cv.ImageStream()\r\n\r\ns.on('data', function(matrix){\r\n   ...\r\n})\r\n\r\nardrone.createPngStream().pipe(s);\r\n```\r\n\r\nNote: Each 'data' event into the ImageStream should be a complete image buffer.\r\n\r\n\r\n\r\n#### Accessing Data\r\n\r\n```javascript\r\nvar mat = new cv.Matrix.Eye(4,4); // Create identity matrix\r\n\r\nmat.get(0,0) // 1\r\n\r\nmat.row(0)  // [1,0,0,0]\r\nmat.col(4)  // [0,0,0,1]\r\n```\r\n\r\n##### Save\r\n\r\n```javascript\r\nmat.save('./pic.jpg')\r\n```\r\n\r\nor:\r\n\r\n```javascript\r\nvar buff = mat.toBuffer()\r\n```\r\n\r\n#### Image Processing\r\n\r\n```javascript\r\nim.convertGrayscale()\r\nim.canny(5, 300)\r\nim.houghLinesP()\r\n```\r\n\r\n\r\n#### Simple Drawing\r\n\r\n```javascript\r\nim.ellipse(x, y)\r\nim.line([x1,y1], [x2, y2])\r\n```\r\n\r\n#### Object Detection\r\n\r\nThere is a shortcut method for\r\n[Viola-Jones Haar Cascade](http://docs.opencv.org/trunk/d7/d8b/tutorial_py_face_detection.html) object\r\ndetection. This can be used for face detection etc.\r\n\r\n```javascript\r\nmat.detectObject(haar_cascade_xml, opts, function(err, matches){})\r\n```\r\n\r\nFor convenience in face detection, cv.FACE_CASCADE is a cascade that can be used for frontal face detection.\r\n\r\nAlso:\r\n\r\n```javascript\r\nmat.goodFeaturesToTrack\r\n```\r\n\r\n#### Contours\r\n\r\n```javascript\r\nmat.findCountours\r\nmat.drawContour\r\nmat.drawAllContours\r\n```\r\n\r\n### Using Contours\r\n\r\n`findContours` returns a `Contours` collection object, not a native array. This object provides\r\nfunctions for accessing, computing with, and altering the contours contained in it.\r\nSee [relevant source code](src/Contours.cc) and [examples](examples/)\r\n\r\n```javascript\r\nvar contours = im.findContours();\r\n\r\n// Count of contours in the Contours object\r\ncontours.size();\r\n\r\n// Count of corners(verticies) of contour `index`\r\ncontours.cornerCount(index);\r\n\r\n// Access vertex data of contours\r\nfor(var c = 0; c < contours.size(); ++c) {\r\n  console.log(\"Contour \" + c);\r\n  for(var i = 0; i < contours.cornerCount(c); ++i) {\r\n    var point = contours.point(c, i);\r\n    console.log(\"(\" + point.x + \",\" + point.y + \")\");\r\n  }\r\n}\r\n\r\n// Computations of contour `index`\r\ncontours.area(index);\r\ncontours.arcLength(index, isClosed);\r\ncontours.boundingRect(index);\r\ncontours.minAreaRect(index);\r\ncontours.isConvex(index);\r\ncontours.fitEllipse(index);\r\n\r\n// Destructively alter contour `index`\r\ncontours.approxPolyDP(index, epsilon, isClosed);\r\ncontours.convexHull(index, clockwise);\r\n```\r\n\r\n#### Face Recognization\r\n\r\nIt requires to `train` then `predict`. For acceptable result, the face should be cropped, grayscaled and aligned, I ignore this part so that we may focus on the api usage.\r\n\r\n** Please ensure your OpenCV 3.2+ is configured with contrib. MacPorts user may `port install opencv +contrib` **\r\n\r\n```javascript\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst cv = require('opencv');\r\n\r\nfunction forEachFileInDir(dir, cb) {\r\n  let f = fs.readdirSync(dir);\r\n  f.forEach(function (fpath, index, array) {\r\n    if (fpath != '.DS_Store')\r\n     cb(path.join(dir, fpath));\r\n  });\r\n}\r\n\r\nlet dataDir = \"./_training\";\r\nfunction trainIt (fr) {\r\n  // if model existe, load it\r\n  if ( fs.existsSync('./trained.xml') ) {\r\n    fr.loadSync('./trained.xml');\r\n    return;\r\n  }\r\n\r\n  // else train a model\r\n  let samples = [];\r\n  forEachFileInDir(dataDir, (f)=>{\r\n      cv.readImage(f, function (err, im) {\r\n          // Assume all training photo are named as id_xxx.jpg\r\n          let labelNumber = parseInt(path.basename(f).substring(3));\r\n          samples.push([labelNumber, im]);\r\n      })\r\n  })\r\n\r\n  if ( samples.length > 3 ) {\r\n    // There are async and sync version of training method:\r\n    // .train(info, cb)\r\n    //     cb : standard Nan::Callback\r\n    //     info : [[intLabel,matrixImage],...])\r\n    // .trainSync(info)\r\n    fr.trainSync(samples);\r\n    fr.saveSync('./trained.xml');\r\n  }else {\r\n    console.log('Not enough images uploaded yet', cvImages)\r\n  }\r\n}\r\n\r\nfunction predictIt(fr, f){\r\n  cv.readImage(f, function (err, im) {\r\n    let result = fr.predictSync(im);\r\n    console.log(`recognize result:(${f}) id=${result.id} conf=${100.0-result.confidence}`);\r\n  });\r\n}\r\n\r\n//using defaults: .createLBPHFaceRecognizer(radius=1, neighbors=8, grid_x=8, grid_y=8, threshold=80)\r\nconst fr = new cv.FaceRecognizer();\r\ntrainIt(fr);\r\nforEachFileInDir('./_bench', (f) => predictIt(fr, f));\r\n```\r\n\r\n## Test\r\n\r\nUsing [tape](https://github.com/substack/tape). Run with command:\r\n\r\n`npm test`.\r\n\r\n## Code coverage\r\n\r\nUsing [istanbul](http://gotwarlost.github.io/istanbul/) and [lcov](http://ltp.sourceforge.net/coverage/lcov.php). Run with command:\r\n\r\n`make cover`\r\n\r\nBuild version of `opencv.node` will be generated, and coverage files will be put in `coverage/` directory. These files can be remvoved automatically by running `make clean`.\r\n\r\n## MIT License\r\nThe library is distributed under the MIT License - if for some reason that\r\ndoesn't work for you please get in touch.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/peterbraden/node-opencv.git"
  },
  "scripts": {
    "build": "node-gyp build",
    "install": "node-pre-gyp install --build-from-source",
    "test": "node test/unit.js"
  },
  "version": "6.0.0"
}
